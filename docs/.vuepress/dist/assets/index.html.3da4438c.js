import{_ as p,o as c,c as l,a as n,b as e,w as r,d as a,e as s,r as t}from"./app.ba620787.js";const d={},u=a(`<h1 id="\u5FEB\u901F\u5F00\u59CB" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u901F\u5F00\u59CB" aria-hidden="true">#</a> \u5FEB\u901F\u5F00\u59CB</h1><h2 id="_1-\u5B89\u88C5" tabindex="-1"><a class="header-anchor" href="#_1-\u5B89\u88C5" aria-hidden="true">#</a> 1. \u5B89\u88C5</h2><h3 id="\u6B65\u9AA4-1-\u5B89\u88C5paddle" tabindex="-1"><a class="header-anchor" href="#\u6B65\u9AA4-1-\u5B89\u88C5paddle" aria-hidden="true">#</a> <code>\u6B65\u9AA4 1</code> \u5B89\u88C5Paddle</h3><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><p>\u9009\u62E9CPU\u6216GPU\u5176\u4E00\u5B89\u88C5\u5373\u53EF</p></div><ul><li><strong>CPU\u7248:</strong></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>python3 -m pip <span class="token function">install</span> <span class="token assign-left variable">paddlepaddle</span><span class="token operator">==</span><span class="token number">2.3</span>.0 -i https://mirror.baidu.com/pypi/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),v=n("strong",null,"GPU\u7248:",-1),h=s(" (\u901A\u5E38\u9700\u8981\u5B89\u88C5CUDA\u7B49\u663E\u5361\u9002\u914D\u8F6F\u4EF6) \u5177\u4F53\u7684\u5B89\u88C5\u65B9\u5F0F\uFF0C\u7531\u4E8E\u4E0D\u540C\u73AF\u5883(Mac\u3001Linux)\u7684\u5B89\u88C5\u65B9\u5F0F\u4E0D\u540C, \u53EF"),m={href:"https://www.paddlepaddle.org.cn/",target:"_blank",rel:"noopener noreferrer"},k=s("\u70B9\u51FB\u67E5\u770B\u5177\u4F53\u5B89\u88C5\u65B9\u5F0F"),b=a(`<h3 id="\u6B65\u9AA4-2-\u5B89\u88C5vsearcher\u5E93" tabindex="-1"><a class="header-anchor" href="#\u6B65\u9AA4-2-\u5B89\u88C5vsearcher\u5E93" aria-hidden="true">#</a> <code>\u6B65\u9AA4 2</code> \u5B89\u88C5vsearcher\u5E93</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token assign-left variable">vsearcher</span><span class="token operator">==</span><span class="token number">0.2</span>.16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-\u57FA\u672C\u4F7F\u7528\u6848\u4F8B" tabindex="-1"><a class="header-anchor" href="#_2-\u57FA\u672C\u4F7F\u7528\u6848\u4F8B" aria-hidden="true">#</a> 2. \u57FA\u672C\u4F7F\u7528\u6848\u4F8B</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> vsearcher <span class="token keyword">import</span> VSearcher

<span class="token keyword">def</span> <span class="token function">case1_base_use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; \u5904\u7406\u89C6\u9891\u83B7\u53D6\u8BFE\u4EF6\uFF0C\u5E76\u68C0\u7D22\u89C6\u9891 &quot;&quot;&quot;</span>
    <span class="token comment"># \u89C6\u9891\u5904\u7406, \u5E76\u8FD4\u56DE\u5904\u7406\u7ED3\u679C\u5BF9\u8C61</span>
    executed_video <span class="token operator">=</span> VSearcher<span class="token punctuation">.</span>executeVideo<span class="token punctuation">(</span>video_file_path<span class="token operator">=</span><span class="token string">&#39;./test.mp4&#39;</span><span class="token punctuation">)</span> 
     <span class="token comment"># \u83B7\u53D6\u751F\u6210\u7684\u8BFE\u4EF6\u672C\u5730\u8DEF\u5F84</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;courseware_path: </span><span class="token interpolation"><span class="token punctuation">{</span>executed_video<span class="token punctuation">.</span>cw_local<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>  
    <span class="token comment"># \u641C\u7D22\uFF0C\u5E76\u8FD4\u56DE\u641C\u7D22\u7ED3\u679C\u5BF9\u8C61</span>
    search_result <span class="token operator">=</span> executed_video<span class="token punctuation">.</span>search<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token string">&quot;\u5B66\u4E60&quot;</span><span class="token punctuation">)</span>  
    <span class="token comment"># \u67E5\u770B\u641C\u7D22\u7ED3\u679C(\u8003\u8651\u5230\u901A\u7528\u6027\uFF0C.json()\u65B9\u6CD5\u9ED8\u8BA4\u7F16\u7801\u4E3Autf-8\uFF0C\u6B64\u5904\u4E3A\u4E86\u65B9\u4FBF\u4E2D\u6587\u663E\u793A, \u8F6C\u7801\u4E3Aunicode-escape)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>search_result<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;unicode-escape&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    case1_base_use<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),_={class:"custom-container tip"},g=n("p",{class:"custom-container-title"},"TIP",-1),f=s("\u66F4\u591A\u9AD8\u7EA7\u7528\u6CD5\u8BF7\u53C2\u7167"),x=s("VSeacher API"),y=a(`<h2 id="_3-\u5E38\u89C1\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#_3-\u5E38\u89C1\u95EE\u9898" aria-hidden="true">#</a> 3. \u5E38\u89C1\u95EE\u9898</h2><h3 id="_3-1-\u5728linux\u73AF\u5883\u4E0B\u51FA\u73B0cv2\u76F8\u5173\u7684\u5F02\u5E38\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#_3-1-\u5728linux\u73AF\u5883\u4E0B\u51FA\u73B0cv2\u76F8\u5173\u7684\u5F02\u5E38\u95EE\u9898" aria-hidden="true">#</a> 3.1 \u5728linux\u73AF\u5883\u4E0B\u51FA\u73B0cv2\u76F8\u5173\u7684\u5F02\u5E38\u95EE\u9898</h3><p><code>\u89E3\u51B3\u65B9\u6848 1</code>\uFF1A \u5B89\u88C5\u5982\u4E0B\u5305</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> opencv-contrib-python
pip <span class="token function">install</span> opencv-python-headless
pip <span class="token function">install</span> openpyxl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u82E5\u6267\u884C<code>\u65B9\u68481</code>\u4E4B\u540E\u8FD8\u6709\u62A5\u9519\uFF0C\u5219\u6267\u884C\u5982\u4E0B\u547D\u4EE4\u5373\u53EF</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip uninstall opencv-contrib-python
pip uninstall opencv-python-headless
pip uninstall openpyxl

pip <span class="token function">install</span> opencv-contrib-python
pip <span class="token function">install</span> opencv-python-headless
pip <span class="token function">install</span> openpyxl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-\u5728linux\u4E0B\u51FA\u73B0\u5982\u4E0B\u5F02\u5E38\u4FE1\u606F" tabindex="-1"><a class="header-anchor" href="#_3-2-\u5728linux\u4E0B\u51FA\u73B0\u5982\u4E0B\u5F02\u5E38\u4FE1\u606F" aria-hidden="true">#</a> 3.2 \u5728Linux\u4E0B\u51FA\u73B0\u5982\u4E0B\u5F02\u5E38\u4FE1\u606F</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>_message.Message._CheckCalledFromGeneratedFile<span class="token punctuation">(</span><span class="token punctuation">)</span>
TypeError: Descriptors cannot not be created directly.
If this call came from a _pb2.py file, your generated code is out of <span class="token function">date</span> and must be regenerated with protoc <span class="token operator">&gt;=</span> <span class="token number">3.19</span>.0.
If you cannot immediately regenerate your protos, some other possible workarounds are:
 <span class="token number">1</span>. Downgrade the protobuf package to <span class="token number">3.20</span>.x or lower.
 <span class="token number">2</span>. Set <span class="token assign-left variable">PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION</span><span class="token operator">=</span>python <span class="token punctuation">(</span>but this will use pure-Python parsing and will be much slower<span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u89E3\u51B3</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip3 <span class="token function">install</span> <span class="token assign-left variable">protobuf</span><span class="token operator">==</span><span class="token number">3.20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function w(P,q){const i=t("ExternalLinkIcon"),o=t("RouterLink");return c(),l("div",null,[u,n("ul",null,[n("li",null,[v,h,n("a",m,[k,e(i)])])]),b,n("div",_,[g,n("p",null,[f,e(o,{to:"/api/"},{default:r(()=>[x]),_:1})])]),y])}var I=p(d,[["render",w],["__file","index.html.vue"]]);export{I as default};
